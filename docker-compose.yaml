name: simple-weather-event-analyzer

services:

  redpanda-kafka-0:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda-kafka-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda-kafka-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --advertise-rpc-addr redpanda-kafka-0:33145
      - --rpc-addr redpanda-kafka-0:33145
      - --mode dev-container
      - --smp 1
      - --default-log-level=info
    image: redpandadata/redpanda:v24.2.11
    container_name: redpanda-kafka-0
    hostname: redpanda-kafka-0
    volumes:
      - redpanda_kafka_0_data:/var/lib/redpanda/data
    networks:
      - app_network
    ports:
      - "18081:18081"
      - "18082:18082"
      - "19092:19092"
      - "19644:9644"

  redpanda-console:
    container_name: redpanda-console
    image: redpandadata/console:v2.8.1
    platform: linux/amd64
    networks:
      - app_network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-kafka-0:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-kafka-0:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-kafka-0:9644"]
    ports:
      - "8080:8080"
    depends_on:
      - redpanda-kafka-0

  simple-weather-event-producer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: simple-weather-event-producer
    hostname: simple-weather-event-producer
    networks:
      - app_network
    environment:
      WEATHER_API_KEY: "${WEATHER_API_KEY}"  # API key passed from the host environment
      KAFKA_BOOTSTRAP_SERVERS: "redpanda-kafka-0:9092"
      KAFKA_TOPIC: "weather-events"
    depends_on:
      - redpanda-kafka-0
    command: >
      python simple_weather_event_producer.py --city-name "Kitchener" --polling-period 3

  starrocks-fe-0:
    image: starrocks/fe-ubuntu:latest
    hostname: starrocks-fe-0
    container_name: starrocks-fe-0
    command:
      - /bin/bash
      - -c
      - |
        /opt/starrocks/fe_entrypoint.sh starrocks-fe-0
    environment:
      - HOST_TYPE=FQDN
      - TZ=UTC
    ports:
      - "18030:8030"
      - "19020:9020"
      - "19030:9030"
    networks:
      - app_network
    volumes:
      - starrocks_fe_0_data:/opt/starrocks/fe/meta

  starrocks-be-0:
    image: starrocks/be-ubuntu:latest
    hostname: starrocks-be-0
    container_name: starrocks-be-0
    command:
      - /bin/bash
      - -c
      - |
        /opt/starrocks/be_entrypoint.sh starrocks-fe-0
    environment:
      - HOST_TYPE=FQDN
      - TZ=UTC
    depends_on:
      - starrocks-fe-0
    networks:
      - app_network
    volumes:
      - starrocks_be_0_data:/opt/starrocks/be/storage

  init-starrocks:
    image: mysql:8.0-bookworm
    platform: linux/amd64
    command: /init_starrocks.sh
    environment:
      - STARROCKS_FE_HOST=starrocks-fe-0
      - STARROCKS_FE_MYSQL_PORT=9030
    volumes:
      - ./init_starrocks.sh:/init_starrocks.sh
    networks:
      - app_network
    depends_on:
      starrocks-be-0:
        condition: service_started

  starrocks-client:
    image: mysql:8.0-bookworm
    container_name: starrocks-client
    platform: linux/amd64
    stdin_open: true
    tty: true
    command: ["bash"]
    environment:
      - STARROCKS_FE_HOST=starrocks-fe-0
      - STARROCKS_FE_MYSQL_PORT=9030
    networks:
      - app_network
    depends_on:
      init-starrocks:
        condition: service_completed_successfully

networks:
  app_network:
    name: app_network
    driver: bridge

volumes:
  redpanda_kafka_0_data: null
  starrocks_fe_0_data: null
  starrocks_be_0_data: null
